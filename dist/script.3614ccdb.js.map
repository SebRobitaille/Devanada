{"version":3,"sources":["../script.js"],"names":["sections","document","querySelectorAll","sectBtns","sectBtn","allSections","querySelector","ctaBtn","contactSec","getElementById","contactBtn","PageTransitions","i","length","addEventListener","currentBtn","className","replace","e","id","target","dataset","forEach","btn","classList","remove","section","add","TypeWriter","txtElement","words","wait","txt","wordIndex","parseInt","type","isDeleting","initializeText","JSON","parse","getAttribute","prototype","currentWord","fullTxt","substring","innerHTML","typeSpeed","setTimeout"],"mappings":";AAAA,IAAMA,EAAWC,SAASC,iBAAiB,YACrCC,EAAWF,SAASC,iBAAiB,aACrCE,EAAUH,SAASC,iBAAiB,YACpCG,EAAcJ,SAASK,cAAc,iBACrCC,EAASN,SAASK,cAAc,YAChCE,EAAaP,SAASQ,eAAe,WACrCC,EAAaT,SAASK,cAAc,cAG1C,SAASK,IAGP,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAQS,OAAQD,IAClCR,EAAQQ,GAAGE,iBAAiB,QAAS,WACnC,IAAIC,EAAad,SAASC,iBAAiB,eAC3Ca,EAAW,GAAGC,UAAYD,EAAW,GAAGC,UAAUC,QAChD,aACA,IAEF,KAAKD,WAAa,gBAKtBX,EAAYS,iBAAiB,QAAS,SAACI,GACrC,IAAMC,EAAKD,EAAEE,OAAOC,QAAQF,GACxBA,IAEFf,EAAQkB,QAAQ,SAACC,GACfA,EAAIC,UAAUC,OAAO,YAIvBzB,EAASsB,QAAQ,SAACI,GAChBA,EAAQF,UAAUC,OAAO,YAGXxB,SAASQ,eAAeU,GAChCK,UAAUG,IAAI,aAK1BpB,EAAOO,iBAAiB,QAAS,SAACI,GAChClB,EAASsB,QAAQ,SAACI,GAChBA,EAAQF,UAAUC,OAAO,YAE3BjB,EAAWgB,UAAUG,IAAI,UAEzB,IAAIZ,EAAad,SAASC,iBAAiB,eAC3Ca,EAAW,GAAGC,UAAYD,EAAW,GAAGC,UAAUC,QAAQ,aAAc,IACxEP,EAAWc,WAAa,gBAU5Bb,IAIA,IAAMiB,EAAa,SAAUC,EAAYC,GAAoB,IAAbC,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,IACrD,KAAKF,WAAaA,EAClB,KAAKC,MAAQA,EACb,KAAKE,IAAM,GACX,KAAKC,UAAY,EACjB,KAAKF,KAAOG,SAASH,EAAM,IAC3B,KAAKI,OACL,KAAKC,YAAa,GA4DpB,SAASC,IAEP,IAAMR,EAAa5B,SAASK,cAAc,aAIpCwB,EAAQQ,KAAKC,MAAMV,EAAWW,aAAa,eAG3CT,EAAOF,EAAWW,aAAa,aAGrC,IAAIZ,EAAWC,EAAYC,EAAOC,GApEpCH,EAAWa,UAAUN,KAAO,WAAY,IAAA,EAAA,KAGhCO,EAAc,KAAKT,UAAY,KAAKH,MAAMjB,OAG1C8B,EAAU,KAAKb,MAAMY,GAIvB,KAAKN,WAEP,KAAKJ,IAAMW,EAAQC,UAAU,EAAG,KAAKZ,IAAInB,OAAS,GAGlD,KAAKmB,IAAMW,EAAQC,UAAU,EAAG,KAAKZ,IAAInB,OAAS,GAKpD,KAAKgB,WAAWgB,UAAiC,qBAAA,OAAA,KAAKb,IApBhB,WAwBtC,IAAIc,EAAY,IAGZ,KAAKV,aACPU,GAAa,GAIV,KAAKV,YAAc,KAAKJ,MAAQW,EAQ1B,KAAKP,YAA2B,KAAb,KAAKJ,MACjC,KAAKI,YAAa,EAGlB,KAAKH,YAGLa,EAAY,MAbZA,EAAY,KAAKf,KAGjB,KAAKK,YAAa,GAcpBW,WAAW,WAAA,OAAM,EAAKZ,QAAQW,IAIhC7C,SAASa,iBAAiB,mBAAoBuB","file":"script.3614ccdb.js","sourceRoot":"..\\src","sourcesContent":["const sections = document.querySelectorAll(\".section\");\r\nconst sectBtns = document.querySelectorAll(\".controls\");\r\nconst sectBtn = document.querySelectorAll(\".control\");\r\nconst allSections = document.querySelector(\".main-content\");\r\nconst ctaBtn = document.querySelector(\".cta-btn\");\r\nconst contactSec = document.getElementById(\"contact\");\r\nconst contactBtn = document.querySelector(\".control-5\");\r\n\r\n// CHANGE PAGE TRANSITION -- CHANGE PAGE TRANSITION -- CHANGE PAGE TRANSITION\r\nfunction PageTransitions() {\r\n  //button click active class\r\n\r\n  for (let i = 0; i < sectBtn.length; i++) {\r\n    sectBtn[i].addEventListener(\"click\", function () {\r\n      let currentBtn = document.querySelectorAll(\".active-btn\");\r\n      currentBtn[0].className = currentBtn[0].className.replace(\r\n        \"active-btn\",\r\n        \"\"\r\n      );\r\n      this.className += \" active-btn\";\r\n    });\r\n  }\r\n\r\n  // Sections active class\r\n  allSections.addEventListener(\"click\", (e) => {\r\n    const id = e.target.dataset.id;\r\n    if (id) {\r\n      // remove selected from the other btns\r\n      sectBtn.forEach((btn) => {\r\n        btn.classList.remove(\"active\");\r\n      });\r\n      // e.target.classList.add(\"active\"); <--- might be useless\r\n      // hide other sections\r\n      sections.forEach((section) => {\r\n        section.classList.remove(\"active\");\r\n      });\r\n\r\n      const element = document.getElementById(id);\r\n      element.classList.add(\"active\");\r\n    }\r\n  });\r\n\r\n  // Makes clicking the CTA button switch to contact screen\r\n  ctaBtn.addEventListener(\"click\", (e) => {\r\n    sections.forEach((section) => {\r\n      section.classList.remove(\"active\");\r\n    });\r\n    contactSec.classList.add(\"active\");\r\n\r\n    let currentBtn = document.querySelectorAll(\".active-btn\");\r\n    currentBtn[0].className = currentBtn[0].className.replace(\"active-btn\", \"\");\r\n    contactBtn.classList += \" active-btn\";\r\n  });\r\n\r\n  // // Toggle theme\r\n  // const themeBtn = document.querySelector(\".theme-btn\");\r\n  // themeBtn.addEventListener(\"click\", () => {\r\n  //   let element = document.body;\r\n  //   element.classList.toggle(\"light-mode\");\r\n  // });\r\n}\r\nPageTransitions();\r\n\r\n  // TYPEWRITER FEATURE --  TYPEWRITER FEATURE -- TYPEWRITER FEATURE\r\n// Start of the typing animation within the header\r\nconst TypeWriter = function (txtElement, words, wait = 3000) {\r\n  this.txtElement = txtElement; //the span for the element holding the word\r\n  this.words = words; // The variable for the array of words\r\n  this.txt = \"\"; // variable for the animation of the typing\r\n  this.wordIndex = 0; //starting with the first word at the index of 0\r\n  this.wait = parseInt(wait, 10); //check it's an integer for the wait time\r\n  this.type(); //method of type that's associated with the typewriter\r\n  this.isDeleting = false; //represents the state if it's deleting or not\r\n};\r\n\r\n// a way we add a method to the typeWriter is by using prototypes\r\nTypeWriter.prototype.type = function () {\r\n  //current index of the word (counting down from 1)\r\n  // use the modulus operator \"%\" to get the remainder of the division\r\n  const currentWord = this.wordIndex % this.words.length;\r\n\r\n  //Get the full text of of the word\r\n  const fullTxt = this.words[currentWord];\r\n\r\n  //Check if the words are deleting\r\n  // The substring() method extracts characters from start to end\r\n  if (this.isDeleting) {\r\n    //removing letters\r\n    this.txt = fullTxt.substring(0, this.txt.length - 1);\r\n  } else {\r\n    //add letters\r\n    this.txt = fullTxt.substring(0, this.txt.length + 1);\r\n  }\r\n\r\n  //insert txt into elements\r\n  //use template leteral `${}` to interpolate variables\r\n  this.txtElement.innerHTML = `<span class=\"txt\">${this.txt}</span>`;\r\n\r\n  //type speed\r\n  // type speed changes (stop, faster deleting, etc), so use let\r\n  let typeSpeed = 200;\r\n\r\n  // if isDeleting is true, cut the speed by half\r\n  if (this.isDeleting) {\r\n    typeSpeed /= 2;\r\n  }\r\n\r\n  // check to see if the words are complete\r\n  if (!this.isDeleting && this.txt === fullTxt) {\r\n    // this will make the animation pause at the end\r\n    typeSpeed = this.wait;\r\n\r\n    // set isDeleting back to true\r\n    this.isDeleting = true;\r\n\r\n    // this is the \"if\" once it's completes typing out the word\r\n  } else if (this.isDeleting && this.txt === \"\") {\r\n    this.isDeleting = false;\r\n\r\n    // move to the next word indrumenting by 1\r\n    this.wordIndex++;\r\n\r\n    // pause before starting the next word\r\n    typeSpeed = 300;\r\n  }\r\n\r\n  // timer for each letter that is added or deleted\r\n  setTimeout(() => this.type(), typeSpeed); // 2 words per second\r\n};\r\n\r\n// initializing on DOM load\r\ndocument.addEventListener(\"DOMContentLoaded\", initializeText);\r\nfunction initializeText() {\r\n  // getting the h2 element on the DOM\r\n  const txtElement = document.querySelector(\".txt-type\");\r\n\r\n  // getting the text attributes using \"data-\"\r\n  // need to use JSON.parse() method to turn string into an array\r\n  const words = JSON.parse(txtElement.getAttribute(\"data-words\"));\r\n\r\n  // getting the wait attribute using \"data-\"\r\n  const wait = txtElement.getAttribute(\"data-wait\");\r\n\r\n  //initialize the typewriter function\r\n  new TypeWriter(txtElement, words, wait);\r\n}\r\n\r\n"]}